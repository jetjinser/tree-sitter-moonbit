================================================================================
Type definitions
================================================================================
type X
priv type X
pub (readonly) type X
type X[t]
--------------------------------------------------------------------------------

(structure
  (structure_item
    (type_definition
      (identifier
        (uppercase_identifier))))
  (structure_item
    (type_definition
      (visibility)
      (identifier
        (uppercase_identifier))))
  (structure_item
    (type_definition
      (visibility
        (pub_attribute))
      (identifier
        (uppercase_identifier))))
  (structure_item
    (type_definition
      (identifier
        (uppercase_identifier))
      (type_parameters
        (type_identifier
          (identifier
            (lowercase_identifier)))))))

================================================================================
Struct definitions
================================================================================
pub struct Ref[T] { mut content: T }

struct Queue[T] {
  front:List[T]
  back:List[T]
}

struct Color {
  r: Int
  g: Int
  b: Int
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (struct_definition
      (visibility)
      (identifier
        (uppercase_identifier))
      (type_parameters
        (type_identifier
          (identifier
            (uppercase_identifier))))
      (struct_field_declaration
        (mutability)
        (lowercase_identifier)
        (colon)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))))
  (structure_item
    (struct_definition
      (identifier
        (uppercase_identifier))
      (type_parameters
        (type_identifier
          (identifier
            (uppercase_identifier))))
      (struct_field_declaration
        (lowercase_identifier)
        (colon)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier)))
            (type_arguments
              (type
                (apply_type
                  (qualified_type_identifier
                    (identifier
                      (uppercase_identifier)))))))))
      (struct_field_declaration
        (lowercase_identifier)
        (colon)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier)))
            (type_arguments
              (type
                (apply_type
                  (qualified_type_identifier
                    (identifier
                      (uppercase_identifier)))))))))))
  (structure_item
    (struct_definition
      (identifier
        (uppercase_identifier))
      (struct_field_declaration
        (lowercase_identifier)
        (colon)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (struct_field_declaration
        (lowercase_identifier)
        (colon)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (struct_field_declaration
        (lowercase_identifier)
        (colon)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier)))))))))

================================================================================
Enum definitions
================================================================================
enum Empyt {}
enum One { One }
enum Two[A, B] {
  Left(A)
  Right(B)
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (enum_definition
      (identifier
        (uppercase_identifier))))
  (structure_item
    (enum_definition
      (identifier
        (uppercase_identifier))
      (enum_constructor
        (uppercase_identifier))))
  (structure_item
    (enum_definition
      (identifier
        (uppercase_identifier))
      (type_parameters
        (type_identifier
          (identifier
            (uppercase_identifier)))
        (type_identifier
          (identifier
            (uppercase_identifier))))
      (enum_constructor
        (uppercase_identifier)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (enum_constructor
        (uppercase_identifier)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier)))))))))

================================================================================
value definitions
================================================================================
let x = 42
pub let y: Int = 42
--------------------------------------------------------------------------------

(structure
  (structure_item
    (value_definition
      (lowercase_identifier)
      (expression
        (simple_expression
          (atomic_expression
            (literal
              (integer_literal)))))))
  (structure_item
    (value_definition
      (pub)
      (lowercase_identifier)
      (type_annotation
        (colon)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (expression
        (simple_expression
          (atomic_expression
            (literal
              (integer_literal))))))))

================================================================================
Function definitions
================================================================================
fn id[T] (x: T) -> T { x }
fn empty () { }
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (type_parameters
        (type_identifier
          (identifier
            (uppercase_identifier))))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier))))))))
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (block_expression
        (statement_expression
          (expression
            (simple_expression
              (qualified_identifier
                (lowercase_identifier))))))))
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (parameters)
      (block_expression))))

================================================================================
Trait definitions
================================================================================
trait A {
  a(Self) -> Int
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (trait_definition
      (identifier
        (uppercase_identifier))
      (trait_method_declaration
        (function_identifier
          (lowercase_identifier))
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier)))))
        (return_type
          (type
            (apply_type
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier))))))))))

================================================================================
Trait definitions
================================================================================
trait A {
  a(Int, Self) -> Self
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (trait_definition
      (identifier
        (uppercase_identifier))
      (trait_method_declaration
        (function_identifier
          (lowercase_identifier))
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier)))))
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier)))))
        (return_type
          (type
            (apply_type
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier))))))))))

================================================================================
Test
================================================================================

let printable = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
--------------------------------------------------------------------------------

(structure
  (structure_item
    (value_definition
      (lowercase_identifier)
      (expression
        (simple_expression
          (atomic_expression
            (literal
              (string_literal
                (string_fragment
                  (unescaped_string_fragment))
                (string_fragment
                  (escape_sequence))
                (string_fragment
                  (unescaped_string_fragment))
                (string_fragment
                  (unescaped_string_fragment))
                (string_fragment
                  (unescaped_string_fragment))))))))))

================================================================================
Trait definitions with super trait
================================================================================
trait A: B + Compare {
  a(Self) -> Int
}
--------------------------------------------------------------------------------

(structure
 (structure_item
  (trait_definition
   (identifier
    (uppercase_identifier))
   (super_trait_declaration
    (colon)
    (identifier
     (uppercase_identifier))
    (identifier
     (uppercase_identifier)))
   (trait_method_declaration
    (function_identifier
     (lowercase_identifier))
    (type
     (apply_type
      (qualified_type_identifier
       (identifier
        (uppercase_identifier)))))
    (return_type
     (type
      (apply_type
       (qualified_type_identifier
        (identifier
         (uppercase_identifier))))))))))

================================================================================
Default implementations for methods in trait
================================================================================
trait MyShow {
  repr(Self) -> String
  str (Self) -> String // it has a default implementation
}

impl MyShow::str(self : Self) -> String {
  // default implementation of str
  self.repr()
}

type MyInt Int
fn repr(self:MyInt) -> String {
  self.0.to_string()
}
--------------------------------------------------------------------------------
(structure
 (structure_item
  (trait_definition
   (identifier
    (uppercase_identifier))
   (trait_method_declaration
    (function_identifier
     (lowercase_identifier))
    (type
     (apply_type
      (qualified_type_identifier
       (identifier
        (uppercase_identifier)))))
    (return_type
     (type
      (apply_type
       (qualified_type_identifier
        (identifier
         (uppercase_identifier)))))))
   (trait_method_declaration
    (function_identifier
     (lowercase_identifier))
    (type
     (apply_type
      (qualified_type_identifier
       (identifier
        (uppercase_identifier)))))
    (return_type
     (type
      (apply_type
       (qualified_type_identifier
        (identifier
         (uppercase_identifier)))))))
   (comment)))
 (structure_item
  (impl_definition
   (qualified_type_identifier
    (identifier
     (uppercase_identifier)))
   (colon_colon)
   (function_identifier
    (lowercase_identifier))
   (parameters
    (parameter
     (lowercase_identifier)
     (type_annotation
      (colon)
      (type
       (apply_type
        (qualified_type_identifier
         (identifier
          (uppercase_identifier))))))))
   (return_type
    (type
     (apply_type
      (qualified_type_identifier
       (identifier
        (uppercase_identifier))))))
   (block_expression
    (comment)
    (statement_expression
     (expression
      (simple_expression
       (dot_apply_expression
        (simple_expression
         (qualified_identifier
          (lowercase_identifier)))
        (dot_identifier
         (dot_operator)
         (inner_dot_identifier)))))))))
 (structure_item
  (type_definition
   (identifier
    (uppercase_identifier))
   (type
    (apply_type
     (qualified_type_identifier
      (identifier
       (uppercase_identifier)))))))
 (structure_item
  (function_definition
   (function_identifier
    (lowercase_identifier))
   (parameters
    (parameter
     (lowercase_identifier)
     (type_annotation
      (colon)
      (type
       (apply_type
        (qualified_type_identifier
         (identifier
          (uppercase_identifier))))))))
   (return_type
    (type
     (apply_type
      (qualified_type_identifier
       (identifier
        (uppercase_identifier))))))
   (block_expression
    (statement_expression
     (expression
      (simple_expression
       (dot_apply_expression
        (simple_expression
         (access_expression
          (simple_expression
           (qualified_identifier
            (lowercase_identifier)))
          (accessor
           (dot_operator))))
        (dot_identifier
         (dot_operator)
         (inner_dot_identifier))))))))))
================================================================================
Labelled argument and optional argument
================================================================================
fn greeting(~name: String, ~location: Option[String] = None) -> Unit {
  match location {
    Some(_) => println("Hi, \(name)!")
    None => println("Hi, \(name) from \(location)!")
  }
}

fn init {
  greeting(~name="A")// Hi, A!
  greeting(~name="B", ~location=Some("X"))
}
--------------------------------------------------------------------------------
(structure
 (structure_item
  (function_definition
   (function_identifier
    (lowercase_identifier))
   (parameters
    (parameter
     (labeled_identifier)
     (type_annotation
      (colon)
      (type
       (apply_type
        (qualified_type_identifier
         (identifier
          (uppercase_identifier)))))))
    (parameter
     (labeled_identifier)
     (type_annotation
      (colon)
      (type
       (apply_type
        (qualified_type_identifier
         (identifier
          (uppercase_identifier)))
        (type_arguments
         (type
          (apply_type
           (qualified_type_identifier
            (identifier
             (uppercase_identifier)))))))))
     (expression
      (simple_expression
       (constructor_expression
        (uppercase_identifier))))))
   (return_type
    (type
     (apply_type
      (qualified_type_identifier
       (identifier
        (uppercase_identifier))))))
   (block_expression
    (statement_expression
     (expression
      (match_expression
       (simple_expression
        (qualified_identifier
         (lowercase_identifier)))
       (case_clause
        (pattern
         (simple_pattern
          (constructor_pattern
           (constructor_expression
            (uppercase_identifier))
           (pattern
            (simple_pattern)))))
        (case_clause_body
         (expression
          (simple_expression
           (apply_expression
            (simple_expression
             (qualified_identifier
              (lowercase_identifier)))
            (expression
             (simple_expression
              (atomic_expression
               (string_interpolation
                (string_fragment
                 (unescaped_string_fragment))
                (interpolator
                 (expression
                  (simple_expression
                   (qualified_identifier
                    (lowercase_identifier)))))
                (string_fragment
                 (unescaped_string_fragment)))))))))))
       (case_clause
        (pattern
         (simple_pattern
          (constructor_pattern
           (constructor_expression
            (uppercase_identifier)))))
        (case_clause_body
         (expression
          (simple_expression
           (apply_expression
            (simple_expression
             (qualified_identifier
              (lowercase_identifier)))
            (expression
             (simple_expression
              (atomic_expression
               (string_interpolation
                (string_fragment
                 (unescaped_string_fragment))
                (interpolator
                 (expression
                  (simple_expression
                   (qualified_identifier
                    (lowercase_identifier)))))
                (string_fragment
                 (unescaped_string_fragment))
                (interpolator
                 (expression
                  (simple_expression
                   (qualified_identifier
                    (lowercase_identifier)))))
                (string_fragment
                 (unescaped_string_fragment)))))))))))))))))
 (structure_item
  (function_definition
   (function_identifier
    (lowercase_identifier))
   (block_expression
    (statement_expression
     (expression
      (simple_expression
       (apply_expression
        (simple_expression
         (qualified_identifier
          (lowercase_identifier)))
        (labeled_identifier)
        (expression
         (simple_expression
          (atomic_expression
           (literal
            (string_literal
             (string_fragment
              (unescaped_string_fragment)))))))))))
    (comment)
    (statement_expression
     (expression
      (simple_expression
       (apply_expression
        (simple_expression
         (qualified_identifier
          (lowercase_identifier)))
        (labeled_identifier)
        (expression
         (simple_expression
          (atomic_expression
           (literal
            (string_literal
             (string_fragment
              (unescaped_string_fragment)))))))
        (labeled_identifier)
        (expression
         (simple_expression
          (apply_expression
           (simple_expression
            (constructor_expression
             (uppercase_identifier)))
           (expression
            (simple_expression
             (atomic_expression
              (literal
               (string_literal
                (string_fragment
                 (unescaped_string_fragment))))))))))))))))))
